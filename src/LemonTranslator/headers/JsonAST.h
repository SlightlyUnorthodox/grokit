#ifndef _JSON_AST_H_
#define _JSON_AST_H_

#include "json.h"
#include <string>

// Helper functions and types for building JSON representation of parsetree

// Defines for the names of the keys in the JSON objects

// Node stuff
#define J_NODE_TYPE     "node_type"
#define J_NODE_DATA     "node_data"
#define J_NODE_SOURCE   "node_source"
#define J_DATA          J_NODE_DATA

#define J_NAME          "name"
#define J_TYPE          "type"
#define J_TARGS         "t_args"
#define J_ARGS          "args"
#define J_CARGS         "const_args"
#define J_SARGS         "state_args"
#define J_VAL           "value"
#define J_SOURCE        "source"
#define J_FILE          "file"
#define J_LINE          "line"
#define J_COL           "column"
#define J_COLS          "columns"
#define J_TUPLES        "tuples"
#define J_QUERIES       "queries"

#define J_STATE         "state"
#define J_SEP           "separator"
#define J_LIMIT         "limit"

#define J_SLOT          "slot"

#define J_ALIAS         "alias"

// Used to keep around the C++ expressions generated by the old parser
#define J_C_EXPR        "c_expr"
#define J_CST_STR       "cst_str"
#define J_C_DEFS        "c_defs"
#define J_OLD_HEADER    "old_header"
#define J_OLD_TYPE      "old_type"

// Case statement
#define J_BASE          "base"
#define J_CASES         "cases"
#define J_DEFAULT       "default"
// Individual cases
#define J_TEST          "test"
#define J_EXPR          "expression"

// Match statement
#define J_PATT          "pattern"

// Overall program node
#define J_HEADER        "header"
#define J_WAYPOINTS     "waypoints"
#define J_EDGES         "edges"
#define J_ATTRIBUTES    "attributes"
#define J_JOB_ID        "job_id"

// Waypoints
#define J_ATT_MAP       "att_map"
#define J_PAYLOAD       "payload"

// Selection
#define J_FILTERS       "filters"
#define J_SYNTH         "synth"
#define J_ATT           "attribute"

// GT
#define J_PASSTHROUGH   "passthrough"

// Join
#define J_LHS           "lhs"
#define J_RHS           "rhs"

#define J_COLS_IN       "columns_in"
#define J_COLS_OUT      "columns_out"

///// Node Types /////
// Types
#define JN_DT           "datatype"
#define JN_IDENTIFIER   "identifier"
#define JN_TYPEOF       "typeof"
#define JN_STATE        "state"
#define JN_FUNCTOR      "functor"
#define JN_REFERENCE    "reference"

// Waypoint
#define JN_PRINT_WP     "print_wp"
#define JN_TL_WP        "textloader_wp"
#define JN_GLA_WP       "gla_wp"
#define JN_GI_WP        "gi_wp"
#define JN_GT_WP        "gt_wp"
#define JN_GF_WP        "gf_wp"
#define JN_GIST_WP      "gist_wp"
#define JN_SEL_WP       "selection_wp"
#define JN_JOIN_WP      "join_wp"
#define JN_SCAN_WP      "scanner_wp"
#define JN_CLEANER_WP   "cleaner_wp"
#define JN_CACHE_WP     "cache_wp"
#define JN_CLUSTER_WP   "cluster_wp"
#define JN_COMPACT_WP   "compact_wp"

// Waypoint payloads
#define JN_GLA          "gla"
#define JN_GT           "gt"
#define JN_GIST         "gist"
#define JN_GI           "gi"
#define JN_GF           "gf"
#define JN_JOIN         "join"
#define JN_SELECTION    "selection"
#define JN_SYNTH        "synth"

// Waypoint result
#define JN_RESULT       "result"

// Expressions
#define JN_LIT          "literal"
#define JN_NULL         "null"
#define JN_ATT          "att"
#define JN_FUNC         "function"
#define JN_METHOD       "method"
#define JN_OP           "operator"
#define JN_CASE         "case"
#define JN_MATCH        "match"

// JSON
#define JN_JSON_INLINE  "json_inline"
#define JN_JSON_FILE    "json_file"

// Filter expressions
#define JN_FIL_UNARY    "filter_unary"
#define JN_FIL_BINARY   "filter_binary"

#define JN_NAMED_ARGS   "named_arguments"
#define JN_NAMED_EXPRS  "named_expression_list"

// Headers
#define JN_DEFINE       "define"
#define JN_IMPORT       "import"

#define JN_PROGRAM      "program"

Json::Value Json_SourceInfo( std::string filename, int lineNo, int colNo );

// Creates a JSON AST node of a certain type with a data payload and logs where it appeared in the source.
Json::Value Json_Node( Json::Value sourceInfo, std::string type, Json::Value & data );

Json::Value Json_DataType( Json::Value sourceInfo, std::string name, Json::Value t_args,
        Json::Value alias);

Json::Value Json_Reference( Json::Value sourceInfo, std::string name );

Json::Value Json_TypeOf( Json::Value sourceInfo, Json::Value attName );

Json::Value Json_State( Json::Value sourceInfo, std::string source, Json::Value type );

Json::Value Json_Functor( Json::Value sourceInfo, std::string name, Json::Value args );

Json::Value Json_Literal( Json::Value sourceInfo, std::string value, std::string type );

Json::Value Json_Null( Json::Value sourceInfo );

Json::Value Json_Attribute( Json::Value sourceInfo, std::string name );

// Creates an object for a single test within a case
Json::Value Json_CaseTest( Json::Value test, Json::Value expr );

// Creates a case with an optional base, multiple tests, and an optional default
// sourceInfo must be a value returned by Json_SourceInfo
// tests must be a JSON array containing tests created by Json_CaseTest
// default, if given, must be an expression
// base, if given, must be an expression that will be evaluated once and then compared for equality
//  against the tests
Json::Value Json_Case(  Json::Value sourceInfo,
                        Json::Value tests,
                        Json::Value defaultExpr = Json::Value(Json::nullValue),
                        Json::Value baseExpr = Json::Value(Json::nullValue)
                     );

// Creates a case with no base, a single test and a default
Json::Value Json_CaseSimple( Json::Value sourceInfo, Json::Value test, Json::Value trueExpr, Json::Value falseExpr );

Json::Value Json_Match( Json::Value sourceInfo, std::string pattern, Json::Value expr );

// Creates a function node with a given name, arguments, and optionally template arguments.
// args must be a JSON list of expressions.
// tArgs, if given, must be an object mapping template parameters to their
//  values.
Json::Value Json_Function(  Json::Value sourceInfo,
                            Json::Value name,
                            Json::Value args,
                            Json::Value tArgs
                         );

// Creates a method node with a given name, object, and args.
// name must be an identifier.
// obj must be an expression.
// args must be a list of expressions, possibly empty.
Json::Value Json_Method(    Json::Value sourceInfo,
                            std::string name,
                            Json::Value obj,
                            Json::Value args
                        );

Json::Value Json_Operator( Json::Value sourceInfo, std::string name, Json::Value args );

Json::Value Json_Identifier( Json::Value sourceInfo, std::string value );

Json::Value Json_GLA(   Json::Value sourceInfo,
                        std::string name,
                        Json::Value tArgs,
                        Json::Value alias
                    );

Json::Value Json_GF(    Json::Value sourceInfo,
                        std::string name,
                        Json::Value tArgs,
                        Json::Value alias
                   );

Json::Value Json_GT(    Json::Value sourceInfo,
                        std::string name,
                        Json::Value tArgs,
                        Json::Value alias
                   );

Json::Value Json_GIST(  Json::Value sourceInfo,
                        std::string name,
                        Json::Value tArgs,
                        Json::Value alias
                     );

Json::Value Json_GI(    Json::Value sourceInfo,
                        std::string name,
                        Json::Value tArgs,
                        Json::Value alias
                   );

Json::Value Json_ExprWrap( Json::Value expr, std::string cExpr, std::string cstStr, std::string defs );

/*
Json::Value Json_Waypoint(  Json::Value sourceInfo,
                            std::string name,
                            std::string type,
                            Json::Value value
                         );
*/

// Describes a DEFINE statement, where `type` is aliased with `name`
Json::Value Json_Define( Json::Value sourceInfo, std::string name, Json::Value type );

// Describes an IMPORT statement
Json::Value Json_Import( Json::Value sourceInfo, Json::Value ident );

Json::Value Json_Waypoint( std::string nType, Json::Value payload );

Json::Value Json_NamedArgs( Json::Value sourceInfo, Json::Value payload );

Json::Value Json_NamedExpressionList( Json::Value sourceInfo, Json::Value payload );

// Filter expressions
Json::Value Json_FilterUnary( Json::Value sourceInfo, std::string op, Json::Value expr );
Json::Value Json_FilterBinary( Json::Value sourceInfo, std::string op, Json::Value left, Json::Value right );

Json::Value Json_JsonInline( Json::Value sourceInfo, Json::Value jVal );
Json::Value Json_JsonFile( Json::Value sourceInfo, std::string filename );

#endif // _JSON_AST_H_
